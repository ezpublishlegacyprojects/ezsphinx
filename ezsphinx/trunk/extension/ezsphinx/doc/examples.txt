Author
======
(C) 2009 JSC Coral solutions
Remigijus Kiminas

==================
General eZSphinx template function features. 0.1 beta
==================
fetch( ezsphinx, search,
       hash( query, text,
           [ offset,             offset,            ]
           [ limit,              limit,             ]
           [ section_id,         id,                ]          
           [ publish_timestamp,  time,              ]
           [ publish_date,       date,              ]
           [ class_id,           mixed,             ]
           [ class_attribute_id, mixed,             ]
           [ sort_by,            sort_by,           ]           
           [ field_weight,       array,             ]           
           [ parent_node_id,     mixed,             ]           
           [ filter,             mixed,             ]           
           [ as_objects,         bool,              ]           
           [ index_name,         string,            ]           
           [ match_type,         string,            ]           
           [ subtree_array,      mixed,             ]           
           [ ignore_visibility,  ignore_visibility, ] ) )
/**************/
[query]
String of text to search, also can be empty, like emty search is allowed. Integer type number


[offset]
Pagination offset. Integer type number


[section_id]
Only match objects that are in this section. Also can be array of sections.
Example.
'section_idarray', ('7','1')


[publish_timestamp]
Match objects that are published in specifiend unix timestamp interval.
Example.
'publish_timestamp', array( '1033920746', '1033920789' )


[publish_date]
Only search objects published during the last day / week / month / three months / one year.
Example.
'publish_date', 1


[class_id]
Only match objects that are instances of this class. This parameter can also be an array of class ID numbers.
Example. 
'class_id', ('49','1')


[class_attribute_id]
Search text only in this class attribute
IMPORTANT this will work if match_type is 'SPH_MATCH_EXTENDED'
Can be class attribute id or array of class attributes ID numbers
Example. 
'class_attribute_id',array(349)

[sort_by]
The sorting mechanism that should be used.
General documentation here
http://ez.no/doc/ez_publish/technical_manual/4_0/reference/modules/content/fetch_functions/list

Allowed features.
[[published]] - object publish date Ex. 'sort_by',(array(false(),'published'))
[[modified]] - object modification date Ex. 'sort_by',(array(false(),'modified'))
[[section]] - object section id Ex. 'sort_by',(array(false(),'section'))
[[id]] - Sphinx index document id Ex. 'sort_by',(array(false(),'id')) . You can use this instead of tipublish data. Like newer document always will get bigger sphinx document id.
[[priority]] - priority of node . 'sort_by',(array(false(),'priority')) . You can use this instead of tipublish data. Like newer document always will get bigger sphinx document id.
[[attribute]] - sorting by class attribute id. Sorting is allowed ionly for integer columns. If in text field was entered number it will be indexed in number column.
Example. 'sort_by',(array(false(),'attribute','248'))


[field_weight]
Used to increse weight of class attributes while matching.
Passed association array with weight values. Examples.
If class title attribute is 4 we can increase it's mathing ranking by this examples.
'field_weight',hash(4,10)
Also increase into and title. Intro class attribute id is 119
'field_weight',hash(4,10,119,5)


[parent_node_id]
Fetch children of specified node or ID's of nodes.
Example. We fetch childrens of node 1009
'parent_node_id', ('1009')


[filter]
Filter is used tu make range filtering on integer types of attributes.
In order to fetch objects that class attribute id is 220 and is equal 487548 it will look like
Example.
filter, hash('220','487548'), // = behaviour

Between interval
filter, hash( 220, array( false(),array( '1','100'))),

>=, <= behaviour they act the same exactly at this moment.
filter, hash( 220, array( '<', '1' )),


[as_objects]
Return array of objects or array
Example.
as_objects, true(),


[index_name]
Sphinx index to search in. If not suplier used default in sphinx.ini file. Can be separated by ; or space. It can be useful if indexas is made different for every section.
Example.
index_name, 'ezsphinx;ezsphinxdelta',


[match_type]
Sphinx match type, possible values:
'SPH_MATCH_ANY'
'SPH_MATCH_ALL'
'SPH_MATCH_PHRASE'
'SPH_MATCH_BOOLEAN'
'SPH_MATCH_EXTENDED'
'SPH_MATCH_FULLSCAN'
'SPH_MATCH_EXTENDED2'

Need to notice if you will want to search text in title let say you have to set match_type 'SPH_MATCH_EXTENDED' and set 'class_attribute_id' valu.
More detailed information can be found here:
http://www.sphinxsearch.com/wiki/doku.php?id=sphinx_docs#matching_modes
Default value is 'SPH_MATCH_ANY'

Example.
match_type, 'SPH_MATCH_ALL',


[ignore_visibility]
Example.
ignore_visibility, true(),


[subtree_array]
Search under some subtrees only. Can be nodeID or array of node's ID
subtree_array, 257,
or subtree_array, array(257,458),


==================
Some usage examples of new search fetch function
==================
                      
1. General template setup example.              
{set page_limit=10}
{set search=fetch(ezsphinx,search,
                  hash(query,$search_text,                                                                                                                              
                       offset,$view_parameters.offset,                                                   
                       limit,$page_limit))}
{set search_result=$search['SearchResult']}
{set search_count=$search['SearchCount']}
{set stop_word_array=$search['StopWordArray']}
{set search_data=$search}


2. Example of searching only in title. Title class attribtue is 349. Now search will be done only in title.
{set page_limit=10}
{set search=fetch(ezsphinx,search,
                  hash(query,$search_text,              
                       match_type, 'SPH_MATCH_EXTENDED',
                       'class_attribute_id',array(349),                                                                                                               
                       offset,$view_parameters.offset,                                                   
                       limit,$page_limit))}
{set search_result=$search['SearchResult']}
{set search_count=$search['SearchCount']}
{set stop_word_array=$search['StopWordArray']}
{set search_data=$search}